For this lesson we will need a button1 and textBox.1, to work with the convert class.  In the last view tutorials we looked at the
BitConverter class, which handle bytes, but we will be looking at handling things other than bytes.  We will be using the Converter
class, in button1.  The first example is Convert., after typing the dot all those are static methods for converting different types
of variables, and no need or way of making instances of them.  The first Convert type we will do is a string to an integer.  We will
also use try, because if the user enters something the Convert class doesn't handle, they will be given an oportunity to do so, and a
MessageBox will tell them what is allowed.

			try
            {
                // L45 convert string to integer, using 
                int iConverted = Convert.ToInt32(textBox1.Text);
                MessageBox.Show(iConverted.ToString());
                textBox1.Clear();
            }
            catch (Exception)
            {
                // message box tells user the error and to clear (the text entered in button1)
                MessageBox.Show("whole integers only!  \nClear " + textBox1.ToString());
				textBox1.Clear();
            }



We can use Convert.ToInt32(textBox1.Text) as a integer variable and do math:

			try
            {
                // L45 convert string to integer, using 
                int iConverted = Convert.ToInt32(textBox1.Text)+100;
                MessageBox.Show(iConverted.ToString());
                textBox1.Clear();
            }
            catch (Exception)
            {
                // message box tells user the error and to clear (the text entered in button1)
                MessageBox.Show("whole integers only!  \nClear " + textBox1.ToString());
            }


Here is an example for Converting an entered value (string) to a char.

            try
            {
                // L45 convert string to char, using 
                char cConverted = Convert.ToChar(textBox1.Text);
                MessageBox.Show(cConverted.ToString());
                textBox1.Clear();
            }
            catch (Exception)
            {            
                MessageBox.Show("One char character only or nothing entered!  \nCLEAR " + textBox1.ToString()+"\n Then start again");
            }


Next example is string from textBox1 as boolean:

            try
            {
                // L45 convert string to char, using 
                bool bConverted = Convert.ToBoolean(textBox1.Text);
                MessageBox.Show(bConverted.ToString());
                textBox1.Clear();
            }
            catch (Exception)
            {            
                MessageBox.Show("True or False only!  \nCLEAR " + textBox1.ToString()+"\n Then start again");
            }

 NOT IN LESSON get ASCII in Hexadecimal

            try
            {
                // convert string to byte, using 
                byte[] bConverted = Encoding.Default.GetBytes(textBox1.Text);

                // get a string with dashes
                var sConverted = BitConverter.ToString(bConverted);

                // replace the dash with a space
                sConverted = sConverted.Replace("-", " ");

                MessageBox.Show((textBox1.Text) + "\nconverted to ASCII Hexadecimal\n" + sConverted.ToString());
                textBox1.Clear();
            }
            catch (Exception)
            {            
                MessageBox.Show("what did you enter?!  \nCLEAR " + textBox1.ToString()+"\n Then start again");
            }
            



******************** highlights from the comments area ********************



NONE


