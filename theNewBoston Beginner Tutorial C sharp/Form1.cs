using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// added L20
using myNamespace;



namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            // L35 byte variable max 255 bits only possitive integers
            byte myByte = 255;

            // an signed byte sbyte, supports negative integers as well as positive ones, min -255
            sbyte mySbyte = -1;

            // two bytes put together is called a short, 16 bit
            short myShort = 0;

            // another way to represent a short is an Int16
            Int16 myInt16 = myShort;

            // regular int is 32 bits
            int myInt = 0;

            // another way to represent int is Int32
            Int32 myInt32 = myInt;

            // a long is 8 bytes long or 64 bit
            long myLong = 0;

            // another way to represent a long is Int64
            Int64 myInt64 = myLong;


            // these are unsigned variables, only 0 and up numbers

            byte myByte2 = 1;
            ushort myUshort = 0;
            UInt16 myUint = 1;
            uint myUin = 2;
            UInt32 myUInt32 = myUin;
            ulong myUlong = 0;
            UInt64 myUInt64 = myUlong;

            // float for very small or very large numbers, only accurate to 7 digits
            float myFloat = 123456789746435;
            MessageBox.Show(myFloat.ToString());

            // float with decimal point
            float myDecimalFloat = 12.33F;

            // a double does what a float does, but does not need the F suffix
            double myDouble = 123.456;

            // 1 character, within single quoates
            char myChar = '1';
            char myChar2 = 'a';
        }


        private void Mc_OnPropertyChanged(object sender, EventArgs e)
        {
            // this was generated by VS but not what we needed
            //throw new NotImplementedException();

            // this message does not change the properties, but notifies us that they have changed
            MessageBox.Show("This was caused by an event, because properties have changed", "Events");
        }



        private void button2_Click(object sender, EventArgs e)
        {

        }




        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void button3_Click(object sender, EventArgs e)
        {
            // to display the returned contents in myMethod3's, static return
            MessageBox.Show(myMethod3());
            textBox3.Clear();
            textBox3.Text += myMethod3();
        }

        // since myMethod3 is a static type not a void type, it now can return a static value
        string myMethod3()
        {
            return "This is a static method";
        }

        private void button4_Click(object sender, EventArgs e)
        {
            int i = 234;
            // to display the returned contents in myMethod2's, string name
            MessageBox.Show(myMethod4(i).ToString());
            textBox4.Clear();
            textBox4.Text += myMethod4(i);
        }

        // since myMethod2 is a string type not a void type, it now can return a string value
        int myMethod4(int name4)
        {
            return name4;
        }


    private void button5_Click(object sender, EventArgs e)
        {
            // to display the returned contents in myMethod5's, static return
            MessageBox.Show(myMethod5().ToString());
            textBox5.Clear();
            textBox5.Text += myMethod5();
        }

        // since myMethod3 is a static type not a void type, it now can return a static value
        int myMethod5()
        {
            return 456;
        }

        private void button6_Click(object sender, EventArgs e)
        {
            // to display the returned contents in myMethod6's, static return
            MessageBox.Show(myMethod6().ToString());
          
        }

        // since myMethod6 is a static type not a void type, it now can return a static value
        bool myMethod6()
        {
            return false;
        }


        private void button7_Click(object sender, EventArgs e)
        {
            bool b = true;
            MessageBox.Show(trueFalse(b).ToString());
        }

        bool trueFalse(bool state7)
        {
            return state7;
        }

        private void textBox4_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {

        }
    }
}
