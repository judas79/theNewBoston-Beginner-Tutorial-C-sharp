/*
In the previous tutorial, we used the VS editor to design our user interface, hangmans pole, Hangmans entire body, and retrieved a random word
from a list, for the  game.  We will need all that code to continue our project to work on displaying our random word in our 2nd groupBox. 
We will set up the layout so the blank lines, that represent the amount of letters in our random word, are equaly spaced in GroupBox2.  Then
we will get the length of the word, to get the amount of labels and also display the amount of characterss, as a number, on our Label1.
*/



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// L159 to download text page from the web
using System.Net;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        // L160 store random word
        string sWord = "";

        // L160 label list array, values of for statement stored there
        List<Label> labels = new List<Label>();

        // L155 method to display hangman post in panel1
        void hangManPost()
        {
            //L155 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            //L155 create pen draws 10 pixels and is brown
            Pen pn = new Pen(Color.Brown, 10f);

            // L155 draw starting points for line using graphics, pen and new Points
            // horizontal base
            gr.DrawLine(pn, new Point(157, 300), new Point(203, 300));
            // vertical line going up
            gr.DrawLine(pn, new Point (180, 300), new Point(180, 5));
            // horizontal line going left
            gr.DrawLine(pn, new Point(185, 5), new Point(60, 5));
            // vertical line going down
            gr.DrawLine(pn, new Point(65, 5), new Point(65, 50));

            // L156 temporary for testing body part placement
            drawBodyPart(BodyParts.Head);
            drawBodyPart(BodyParts.Left_Eye);
            drawBodyPart(BodyParts.Right_Eye);
            drawBodyPart(BodyParts.Mouth);
            drawBodyPart(BodyParts.Body);
            drawBodyPart(BodyParts.Left_Arm);
            drawBodyPart(BodyParts.Right_Arm);
            drawBodyPart(BodyParts.Left_Leg);
            drawBodyPart(BodyParts.Right_Leg);

            // L159 temporary for testing:  see random word chosen from the online word list
            MessageBox.Show(GetRandomWord());
        }

        // L156 create enumeration to hold list of entire body and its parts
        enum BodyParts
        {
            Head,
            Left_Eye,
            Right_Eye,
            Mouth,
            Left_Arm,
            Right_Arm,
            Body,
            Left_Leg,
            Right_Leg
        }

        // L156 method to display all the parts of the hangman in panel1, pass in BodyParts name bdprts
        void drawBodyPart(BodyParts bdprts)
        {
            // L156 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            // L156 create pen to draw and is blue, size is 2 pixels
            Pen pn = new Pen(Color.Blue, 2);

            // L156 create black solidBrush to make the eyes
            SolidBrush sb = new SolidBrush(Color.Black);

            // L156 compare if enum bdprts is the head, start at end of hangman pole, elipse size 40x40
            if (bdprts == BodyParts.Head)
                gr.DrawEllipse(pn, 45, 50, 40, 40);

            // L156 draw left eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Left_Eye)
                gr.FillEllipse(sb, 55, 65, 5, 5);

            // L156 draw right eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Right_Eye)
                gr.FillEllipse(sb, 67, 65, 5, 5);

            // L156 draw mouth using pen and using an arch starting at 45 degrees and draw 90 degrees
            else if (bdprts == BodyParts.Mouth)
            {
                pn.Color = (Color.Black);
                gr.DrawArc(pn, 54, 63, 20, 20, 45, 90);
            }
                
            // L157 vertical line going down for body
            else if (bdprts == BodyParts.Body)
            {
                pn.Color = (Color.Blue);
                gr.DrawLine(pn, new Point(65, 90), new Point(65, 180));
            }

            // L157 line going at an angle left arm
            else if (bdprts == BodyParts.Left_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(20, 90));

            // L157 line going at an angle right arm
            else if (bdprts == BodyParts.Right_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(102, 90));

            // L158 angled line going down for left leg
            else if (bdprts == BodyParts.Left_Leg)
                gr.DrawLine(pn, new Point(65, 180), new Point(35, 220));

            // L158 angled line going down for left leg
            else if (bdprts == BodyParts.Right_Leg)
                gr.DrawLine(pn, new Point(65, 180), new Point(95, 220));
        }

        // L159 method to get random word from web text word list
        string GetRandomWord()
        {
            // L159 instance of WebClient
            WebClient wc = new WebClient();

            // L159 string to but contents of online websites word list
            // another list if needed:  
            string sWordList = wc.DownloadString("https://www.mit.edu/~ecprice/wordlist.10000");

            // L159 array to put the WordList into as we split the word up using split point parameters
            string[] aWords = sWordList.Split('\n');

            // NOT in tutorial, only use words with 5 characters or more
            StringBuilder builder = new StringBuilder();
            foreach (string str in aWords)
            {
                if (str.Length > 4)
                {
                    builder.Append(str + "\n");
                }          
            }
            string[] aWords2 = builder.ToString().Split('\n');

            // L159 instance of random
            Random rndm = new Random();

            // L159 return random word from aWords array, 
            // from 0 to 1 minus the length of all words in array
            //return aWords[rndm.Next(0, aWords.Length - 1)];
            return aWords2[rndm.Next(0, aWords2.Length - 1)];
        }

        // L160 method create labels from characters of random word
        void MakeLabels()
        {
            // L160 get our random word from our RandomWord method put it in string sWord
            sWord = GetRandomWord();

            // L160 convert string to char array, for character separation
            char[] cChar = sWord.ToCharArray();

            // L160 create space beteen characters of random word
            int iBetween = 300 / cChar.Length - 1;

            // L160 iterate through our cChar array, to fill our labels list
            for(int i = 0; i < cChar.Length - 1; i++)
            {
                labels.Add(new Label());
            }



/*
First, we will set the location for our labels for each letter [i].  When using location, you always have a new starting Point.  So the labels[i],
1st character, i = 0, which is the first letter in our labels list; its location is equal to a new Point.  Let us assume out random word is 5
characters long, for an example of calculating the labels placement... Then the new points starting position is plotted at, i times the value 
we assigned to iBetteen (0 * 300 / 5 - 1) = 0, then we add 10 to that 0 + 10 = 10, for our x axis coordinate.  We want to start 10 pixels in,
to keep our labels from starting right at the left edge of our groupBox2 area.  The y axis coordinate is always 80, to keep our labels in a
straight horrizontal line.  Our next label character [i] would be equal to 1 (1 * 300 / 5 -1) which equals 59, would be our second labels char
position, and so on.
*/


				// L161 set location of our labels
                labels[i].Location = new Point((i * iBetween) + 10, 80);




/*
Next we will set the text of these labels.  They will start out as a _ (space), for every letter (label), which is Text.  After that we will
set the Parent control of all this, to groupBox2.  Then we will bring the GroupBox2 controls to the front, so no other controls, will be in 
front of it.  Then we will create the labels[] controls and we will be able to see them in our groupBox2.  Debug, to check for errors.
*/


				// L161 set location of our labels
                labels[i].Location = new Point((i * iBetween) + 10, 80);

                // L161 set letters in labels Text as underscores
                labels[i].Text = "_";

                // L161 set labels parent control to Groupbox2
                labels[i].Parent = groupBox2;

                // L161 bring control to the front of all controls
                labels[i].BringToFront();

                // L161 create labels[i] control and so it can be displayed
                labels[i].CreateControl();
            }



/*
We will Finish up our void MakeLabels() method by adding some code to display the nuumerical amount of character, in our cChars, by using
its length property to count the letters.  This comes after setting all the labels[] properties and outside of for statement.
*/


			
            // L161 see numerical value of the random words character amount
            label1.Text = ("Word Length: " + cChar.Length.ToString());
        }




/*
SHOULD have been in the lesson:  We will add our method MakeLabels(); to our Form1_Shown method so we can see all the content we just finished
making.
*/


        private void Form1_Shown(object sender, EventArgs e)
        {
            // L155 pass in hangManPost method to display in form1 using event Shown
            hangManPost();

            // L161 pass in MakeLabel method  to display in form1 using event Shown
            MakeLabels();



/*
NOT in lesson:  Create another button, button3, to use to grab another random word.  If the user doesn't like the amount of characters
that is in the generated random word, another random word can be generated.  If the game entails a point system, the player would lose a 
point, for exchanging the word for a new one.
*/



private void button3_Click(object sender, EventArgs e)
        {
            // NOT in lesson: generate new word for user
            hangManPost();
            MakeLabels();
            // L159 temporary for testing:  see random word chosen from the online word list
            MessageBox.Show(sWord);
        }
    }
}


/*
Also, had to change the for statement in the void MakeLabels() method, to fix the count of empty spaces.  We where short one space, for every
random word.

			// L160 iterate through our cChar array, to fill our labels list
            for(int i = 0; i < cChar.Length - 1; i++)

changed to:

			// L160 iterate through our cChar array, to fill our labels list
            for(int i = 0; i < cChar.Length; i++)
            {
*/





/*************************** highlights from the comments area *******************************/






The reason the labels don't show up is cause Adam forgot to say that he added "MakeLabels();" in "Form1_Shown", he often does that forgive 
him


And if it still doesnt work make sure that the group box containing the labels is named groupBox2, if its not and its named for example group
Box3 make sure to change "labels[i].Parent = groupBox2;" in "MakeLabels".






Instead of  '10'  in  labels location just replace  it by '(between/2)' it looks good.




