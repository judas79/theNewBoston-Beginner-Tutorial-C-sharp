For this lesson we will need button1, a label1, the SaveDialog, and a way to verify that the user has chosen a file to 
download, then create a new class of the WebClient, to download a file.  We also need system. net to use the WevClient 
class.

// added L72
using System.Net;


	private void button1_Click(object sender, EventArgs e)
        {
            // L73create save file dialog box to open for browsing
            SaveFileDialog ISFD = new SaveFileDialog();

            // L73 check that user has made a selection using dialog window
            if (ISFD.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                // L73 create a new class of WebClient
                WebClient cW = new WebClient();

                }
            // button2 starts disabled and is used to clear button1
            button2.Enabled = true;
        }



Instead of displaying the contents of our remote text file, on pastebin.com, we will download the file.  So to download the
file from pastebin, we will need to get the pastebin (raw), direct url to that file:
text.txt
https://pastebin.com/raw/bTcRK3Ab

textLarge.txt
https://pastebin.com/raw/Jwfa1ynH

We will use download file assync, to download the file, in the background, so we can do other things while its downloading.
DownloadFileAsync uses(new Uri) as basically a URL, to download from the address which is in double quoates. DownloadFileAsync
also needs a second parameter; a filename to where to store the downloaded file.  We will use filename, because we are
using the SaVeFileDialog, to put the file somewhere of our choosing.  After choosing the folder we want to store the 
downloaded file in, we have to give the file a name, and an extention type.


                // L73 download file in background using method downloadfile assync, 
                // using new Uri (URL), DownloadFileAsync second parameterwhere to store downloaded file
                cWC.DownloadFileAsync(new Uri("https://pastebin.com/raw/bTcRK3Ab"), ISFD.FileName);



To create a popup message, we can't just put a messageBox.Show, after the download code, we will have to create an event
after the file downloads.  We will use the method from the WebClient class, for this, DownloadedFileCompleted, to do 
this.  
After we type up to the += we hit tab once, and VS will complete the method for you.
cWC.DownloadFileCompleted += 'press tab once'

Then the completed code will be generated:  This is not what the tutorial example looks like, but it works.


				// event triggers downloaded file completed message
                CWC.DownloadFileCompleted += CWC_DownloadFileCompleted;

                }
        }

The followig function was also generated at the same time;  when we double clicked the tab button.  We can comment out
the generated code to throw an error and use it to display when the download has completed in a messageBox.

        private void CWC_DownloadFileCompleted(object sender, AsyncCompletedEventArgs e)
        {
            // L73 generated by VS when CWC.DownloadFileCompleted += CWC_DownloadFileCompleted; 
            // was generated by VS so we could comment out and inject our Messagebox message
            //throw new NotImplementedException();

            // inform user when download it complete
            MessageBox.Show("download completed");


There is another method in our webClient class that we can use to display the progress of out download.  This Download
progress will display every time the download progress ha changed.  We apply this as we did with the download complete,
above, and double click the tab button after we type +=     ...and it will generate the rest of the code and a function
with a throw in it as well  We will comment out the throw statement and use a 'label' to show the progress of our download
as it changes, amount wise.


				// L73 display download progress, press tab twice after typing += to generate the rest
                CWC.DownloadProgressChanged += CWC_DownloadProgressChanged;

                }
        }

        // L73 generated for CWC.DownloadProgressChanged += CWC_DownloadProgressChanged;
        private void CWC_DownloadProgressChanged(object sender, DownloadProgressChangedEventArgs e)
        {
            // generated for download progress then commented out
            //throw new NotImplementedException();

            // show progress completed of download in label
            label1.Text += "download progress: " + e.ProgressPercentage.ToString();
        }








**************************** highlights from the comments area ****************************





I think it looks more "polished" with a progress bar instead of a label.

progressBar1.value = e.ProgressPercentage;


Didn't get at first, until I realized I had not dragged a progress bar into my form and capitalized value:

progressBar1.Value = e.ProgressPercentage;

thanks, it does look a lot better.

My wc. DownloadFileCompleted and cw.DownloadProgressChanged both generated the code, as below,
but it runs fine in the debugger (VS-2017)

CWC.DownloadFileCompleted += CWC_DownloadFileCompleted;