using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();

            // L127 instance of graphics to use for all brushes, pens and gradient brushes
            // created in our form1 constructor for panel1
            Ig = panel1.CreateGraphics();
        }

        private void toolStripButton1_Click(object sender, EventArgs e)
        {

        }

        // L127 variable to paint, or not to, set to not paint
        bool canPaint = false;

        // L127 instance of graphic to use for all brushes, pens and gradient brushes
        // created in our form1 constructor for panel1, it can't be created here
        Graphics Ig;
        private void panel1_MouseDown(object sender, MouseEventArgs e)
        {
            // L127 can paint, mouse is in the held down position
            canPaint = true;
        }

        private void panel1_MouseUp(object sender, MouseEventArgs e)
        {
            // L127 can't paint, mouse is in upward position
            canPaint = false;

            // reset the previous positions of x/y to null
            iPrevX = null;
            iPrevY = null;
        }

        // L127 variables hold the previous values of x and y, which are null
        int? iPrevX = null;
        int? iPrevY = null;
        // L127 commented out: 0,0 was always the starting positions, not good for drawing
        //int iPrevX = 0;
        //int iPrevY = 0;

        private void panel1_MouseMove(object sender, MouseEventArgs e)
        {
            // L127 mouse is moving and canPaint true(mouse is being pressed), paint something
            if (canPaint)
            {
                // L128 create a pen instance, color is black
                Pen Ip = new Pen(Color.Black, float.Parse(toolStripTextBox1.Text));

                // L128 using grahics instance, connect the former mouse position, with the current mouse position 
                // arguements are: the pen instance, use new point to position previous X,Y and current X/Y
                // we added ?? to x/y to check if they are null, or else use previous position of e.X, e.Y
                Ig.DrawLine(Ip, new Point(iPrevX ?? e.X, iPrevY ?? e.Y), new Point(e.X, e.Y));

                // L128 set previous X/Y positions to current X/Y positions
                iPrevX = e.X;
                iPrevY = e.Y;

                // L127 instance for solidbrush to paint with, black line
                //SolidBrush Isb = new SolidBrush(Color.Black);

                // 127 small fillElispe cricles to make a line, from graphics
                // arguements are: SolidBrush instance, get mouses (x,y) cursor positions
                // pass in 'e' (events) for x and y from MouseEventsArgs, get width/heigth
                // from our toolStrip textBox Text, convert string entered into an int
                //Ig.FillEllipse(Isb, e.X, e.Y, Convert.ToInt32(toolStripTextBox1.Text), Convert.ToInt32(toolStripTextBox1.Text));
            }
        }
    }
}
