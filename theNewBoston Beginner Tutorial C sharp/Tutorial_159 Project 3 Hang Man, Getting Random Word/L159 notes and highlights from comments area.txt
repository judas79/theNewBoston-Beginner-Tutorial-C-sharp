/*
In the previous tutorial, we used the VS editor to design our user interface, hangmans pole, and the Hangmans entire body for the  game.  We 
will need all that code to continue our project to get a random word from an online list.  We need to find a wordlist that loads fast with at
least 1000 words, online.  NOT part of the project:  we will download the list to keep it locally and try using it that way, in case the user
doesn't have an internet connection or the site is down.  To use the list online, we will need to use the wevClient class, so we will use the:
using System.Net;
*/


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// L159 to download text page from the web
using System.Net;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

            // L155 method to display hangman post in panel1
            void hangManPost()
        {
            //L155 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            //L155 create pen draws 10 pixels and is brown
            Pen pn = new Pen(Color.Brown, 10f);

            // L155 draw starting points for line using graphics, pen and new Points
            // horizontal base
            gr.DrawLine(pn, new Point(157, 300), new Point(203, 300));
            // vertical line going up
            gr.DrawLine(pn, new Point (180, 300), new Point(180, 5));
            // horizontal line going left
            gr.DrawLine(pn, new Point(185, 5), new Point(60, 5));
            // vertical line going down
            gr.DrawLine(pn, new Point(65, 5), new Point(65, 50));

            // L156 temporary for testing body part placement
            drawBodyPart(BodyParts.Head);
            drawBodyPart(BodyParts.Left_Eye);
            drawBodyPart(BodyParts.Right_Eye);
            drawBodyPart(BodyParts.Mouth);
            drawBodyPart(BodyParts.Body);
            drawBodyPart(BodyParts.Left_Arm);
            drawBodyPart(BodyParts.Right_Arm);
            drawBodyPart(BodyParts.Left_Leg);
            drawBodyPart(BodyParts.Right_Leg);

        }

        // L156 create enumeration to hold list of entire body and its parts
        enum BodyParts
        {
            Head,
            Left_Eye,
            Right_Eye,
            Mouth,
            Left_Arm,
            Right_Arm,
            Body,
            Left_Leg,
            Right_Leg
        }

        // L156 method to display all the parts of the hangman in panel1, pass in BodyParts name bdprts
        void drawBodyPart(BodyParts bdprts)
        {
            // L156 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            // L156 create pen to draw and is blue, size is 2 pixels
            Pen pn = new Pen(Color.Blue, 2);

            // L156 create black solidBrush to make the eyes
            SolidBrush sb = new SolidBrush(Color.Black);

            // L156 compare if enum bdprts is the head, start at end of hangman pole, elipse size 40x40
            if (bdprts == BodyParts.Head)
                gr.DrawEllipse(pn, 45, 50, 40, 40);

            // L156 draw left eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Left_Eye)
                gr.FillEllipse(sb, 55, 65, 5, 5);

            // L156 draw right eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Right_Eye)
                gr.FillEllipse(sb, 67, 65, 5, 5);

            // L156 draw mouth using pen and using an arch starting at 45 degrees and draw 90 degrees
            else if (bdprts == BodyParts.Mouth)
            {
                pn.Color = (Color.Black);
                gr.DrawArc(pn, 54, 63, 20, 20, 45, 90);
            }
                
            // L157 vertical line going down for body
            else if (bdprts == BodyParts.Body)
            {
                pn.Color = (Color.Blue);
                gr.DrawLine(pn, new Point(65, 90), new Point(65, 180));
            }

            // L157 line going at an angle left arm
            else if (bdprts == BodyParts.Left_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(20, 90));

            // L157 line going at an angle right arm
            else if (bdprts == BodyParts.Right_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(102, 90));

            // L158 angled line going down for left leg
            else if (bdprts == BodyParts.Left_Leg)
                gr.DrawLine(pn, new Point(65, 180), new Point(35, 220));

            // L158 angled line going down for left leg
            else if (bdprts == BodyParts.Right_Leg)
                gr.DrawLine(pn, new Point(65, 180), new Point(95, 220));
        }



/*
We will create a method that returns a random word from a downloaded text document, from the web, which will be downloaded when the app is
being used.  So, you will need an internet connection, when using this app to get the words.  We will put the entire list into a string.  To
use this as a list, we will use split, to split of the words, to put the list, into a string array.  Then we will create an instance of 'random'
to choose a random word from our Words array index.  Then we will return the chosen random word, using rndm next word in the aWords array []. 
We will start looking at 0 and go to the end of the aWords list.  We subtract 1, because the aWords index amount of words are 1 - the end of 
the length of the list and are return index amount starts at 0 and would end 1 word before it.
*/



        // L159 method to get random word from web text word list
        string GetRandomWord()
        {
            // L159 instance of WebClient
            WebClient wc = new WebClient();

            // L159 string to but contents of online websites word list
            string sWordList = wc.DownloadString("https://www.mit.edu/~ecprice/wordlist.10000");

            // L159 array to put the WordList into as we split the word up using split point parameters
            string[] aWords = sWordList.Split(' ', '\t', '\n', 'r');

            // L159 instance of random
            Random rndm = new Random();

            // L159 return random word from aWords array, 
            // from 0 to 1 minus the length of all words in array
            return aWords[rndm.Next(0, aWords.Length - 1)];
        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            // L155 pass in hangManPost method to display in form1 using event Shown
            hangManPost();
        }
    }
}


/*
We will use Get, to display the random word, as a test to make sure this works, in our void hangManPost().  We use the  hangManPost() because
it displays everytime the app is run.  We will using messageBox to see the word returned from our GetRandomWord() method.


			// L159 temporary for testing:  see random word chosen from the online word list
            MessageBox.Show(GetRandomWord());
*/



/*
This is NOT in the tutorial.  It filters out words, that we split from the online list, and only uses words that have five characters or more,
to make the game challenging on every round.


			// NOT in tutorial, only use words with 5 characters or more
            StringBuilder builder = new StringBuilder();
            foreach (string str in aWords)
            {
                if (str.Length > 4)
                {
                    builder.Append(str + "\n");
                }          
            }
            string[] aWords2 = builder.ToString().Split('\n');
*/






/****************************** highlight from the comments area *******************************/






I URGENTLY NEED HELP. BESIDES GETTING THE RANDOM WORDS FROM WEBSITE. IS THERE ANY OTHER WAY YOU CAN CREATE THE WORDS? BECAUSE THE WEBSITE SEEM TO HAVE PROBLEM. PLEASE HELP.

Try this - https://raw.githubusercontent.com/Tom25/Hangman/master/wordlist.txt