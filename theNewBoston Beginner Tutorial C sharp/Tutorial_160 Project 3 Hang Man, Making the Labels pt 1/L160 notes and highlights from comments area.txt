/*
In the previous tutorial, we used the VS editor to design our user interface, hangmans pole, Hangmans entire body, and retrieved a random word
from a list, for the  game.  We will need all that code to continue our project to work on displaying our random word in our 2nd groupBox. 
We need to store the random word in a string, and seperate that word into a character array, so we can display each letter of the word in
groupBox2, evenly spaced and underlined.  First we will create a string, near the top of our form, to hold the value, of our random word.
*/


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// L159 to download text page from the web
using System.Net;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        // L160 store random word
        string sWord = "";

        // L155 method to display hangman post in panel1
        void hangManPost()
        {
            //L155 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            //L155 create pen draws 10 pixels and is brown
            Pen pn = new Pen(Color.Brown, 10f);

            // L155 draw starting points for line using graphics, pen and new Points
            // horizontal base
            gr.DrawLine(pn, new Point(157, 300), new Point(203, 300));
            // vertical line going up
            gr.DrawLine(pn, new Point (180, 300), new Point(180, 5));
            // horizontal line going left
            gr.DrawLine(pn, new Point(185, 5), new Point(60, 5));
            // vertical line going down
            gr.DrawLine(pn, new Point(65, 5), new Point(65, 50));

            // L156 temporary for testing body part placement
            drawBodyPart(BodyParts.Head);
            drawBodyPart(BodyParts.Left_Eye);
            drawBodyPart(BodyParts.Right_Eye);
            drawBodyPart(BodyParts.Mouth);
            drawBodyPart(BodyParts.Body);
            drawBodyPart(BodyParts.Left_Arm);
            drawBodyPart(BodyParts.Right_Arm);
            drawBodyPart(BodyParts.Left_Leg);
            drawBodyPart(BodyParts.Right_Leg);

            // L159 temporary for testing:  see random word chosen from the online word list
            MessageBox.Show(GetRandomWord());
        }

        // L156 create enumeration to hold list of entire body and its parts
        enum BodyParts
        {
            Head,
            Left_Eye,
            Right_Eye,
            Mouth,
            Left_Arm,
            Right_Arm,
            Body,
            Left_Leg,
            Right_Leg
        }

        // L156 method to display all the parts of the hangman in panel1, pass in BodyParts name bdprts
        void drawBodyPart(BodyParts bdprts)
        {
            // L156 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            // L156 create pen to draw and is blue, size is 2 pixels
            Pen pn = new Pen(Color.Blue, 2);

            // L156 create black solidBrush to make the eyes
            SolidBrush sb = new SolidBrush(Color.Black);

            // L156 compare if enum bdprts is the head, start at end of hangman pole, elipse size 40x40
            if (bdprts == BodyParts.Head)
                gr.DrawEllipse(pn, 45, 50, 40, 40);

            // L156 draw left eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Left_Eye)
                gr.FillEllipse(sb, 55, 65, 5, 5);

            // L156 draw right eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Right_Eye)
                gr.FillEllipse(sb, 67, 65, 5, 5);

            // L156 draw mouth using pen and using an arch starting at 45 degrees and draw 90 degrees
            else if (bdprts == BodyParts.Mouth)
            {
                pn.Color = (Color.Black);
                gr.DrawArc(pn, 54, 63, 20, 20, 45, 90);
            }
                
            // L157 vertical line going down for body
            else if (bdprts == BodyParts.Body)
            {
                pn.Color = (Color.Blue);
                gr.DrawLine(pn, new Point(65, 90), new Point(65, 180));
            }

            // L157 line going at an angle left arm
            else if (bdprts == BodyParts.Left_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(20, 90));

            // L157 line going at an angle right arm
            else if (bdprts == BodyParts.Right_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(102, 90));

            // L158 angled line going down for left leg
            else if (bdprts == BodyParts.Left_Leg)
                gr.DrawLine(pn, new Point(65, 180), new Point(35, 220));

            // L158 angled line going down for left leg
            else if (bdprts == BodyParts.Right_Leg)
                gr.DrawLine(pn, new Point(65, 180), new Point(95, 220));
        }

        // L159 method to get random word from web text word list
        string GetRandomWord()
        {
            // L159 instance of WebClient
            WebClient wc = new WebClient();

            // L159 string to but contents of online websites word list
            // another list if needed:  
            string sWordList = wc.DownloadString("https://www.mit.edu/~ecprice/wordlist.10000");

            // L159 array to put the WordList into as we split the word up using split point parameters
            string[] aWords = sWordList.Split('\n');

            // NOT in tutorial, only use words with 5 characters or more
            StringBuilder builder = new StringBuilder();
            foreach (string str in aWords)
            {
                if (str.Length > 4)
                {
                    builder.Append(str + "\n");
                }          
            }
            string[] aWords2 = builder.ToString().Split('\n');

            // L159 instance of random
            Random rndm = new Random();

            // L159 return random word from aWords array, 
            // from 0 to 1 minus the length of all words in array
            //return aWords[rndm.Next(0, aWords.Length - 1)];
            return aWords2[rndm.Next(0, aWords2.Length - 1)];
        }



/*
We will now make a method to create a label, for each of the letter characters, derived from the random word.  We will not be returning 
anything so we will call it void MakeLabels.  We will use Get RandomWord, to get our random word from our RandomWord method, that will
return us, the word we are going to obtain our characters to make our letter labels from.  Next we will convert the sWord string to a 
character array, so the letter elements that make up the word are separate characters, in the array.
We will need to separate each character, that makes up the word, evenly spaced from each other.  We will make an integer that divides the
space taken up by all the characters, from the space alloted by the display, of each of the letter labels.   The space between letters will
be equal and fit neatly, in the groupbox2 area.  We will look at the size property of the x axis, for the groupBox2, as to get the horizontal
area availabe to be divided up by the characters length, of the random word.  We will round this number down to its nearest 5's.  We will
subtract 1 from our character length, because the last character in a char array is a '/n', for new line, and we don't want to include that.
*/


		// L160 method create labels from characters of random word
        void MakeLabels()
        {
            // L160 get our random word from our RandomWord method put it in string sWord
            sWord = GetRandomWord();

            // L160 convert string to char array, for character separation
            char[] cChar = sWord.ToCharArray();

            // L160 create space beteen characters of random word
            int iBetween = 300 / cChar.Length - 1;



/*
Next, near the top of our screen, where our sWord string is, we will create a label list array, to hold the values of our individual chars.,
after using a for statement, to put them in there.

		// L160 label list array, values of for statement stored there
        List<Label> labels = new List<Label>();
*/


/*
Last we will add our for statement to put the characters into our list.  
*/


// L160 iterate through our cChar array, to fill our labels list
            for(int i = 0; i < cChar.Length - 1; i++)
            {
                labels.Add(new Label());
            }
        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            // L155 pass in hangManPost method to display in form1 using event Shown
            hangManPost();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            // L159 temporary for testing:  see random word chosen from the online word list
            MessageBox.Show(GetRandomWord());

        }
    }
}





/***************************** NO highlights in the comments area ******************************/