/*
In the previous lesson we mad a public abstract class and renamed it to BaseIO, then created an enumerator to hold our Big and Little Endians, then created a
protected variable to hold whichever data, from the Big or Little Endian, depending on which 0ne we are using.  In this lesson, we will be working on the reader
class, of this reader/ writer.
The first thing we will do is add our system IO namespace to out ByteIO.cs.  We will also add our summary, which we should have done, in the previous lesson.
above the public enumerator 'byteorder'.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ByteOrderIO
{
    // L186 rename class
    //class ByteIO
    public abstract class BaseIO
    {
        /// <summary>
        /// The order of the bytes, both read and written
        /// </summary>
        // L186 holds the big and little endian read and write
        public enum byteorder
        {
            BigEndian,
            LittleEndian
        }
        // L186 protected variable to store big or little endian data, depending which one we use
        // used in this class or its derived class
        protected byteorder Byteorder;
    }
}
*/



/*
We wre done with our public abstract class BaseIO, so we can collapse it in our editor, and create our reader class, above it.  We will name our public class,
Reader.  We will want both our reder and writer classes to inherit from our BaseIO class.  Inside this class we will make the binary reader, using the System 
IO namespace we imported.  We will create the binary reader, but will not pass anything to it intil we create the constructor, to pass  the path to the file
that it will be reading, trough the reader.  Next we will create a long property, to hold the position of the binary reader.  Then we will use get to get the
current position.  Depending on what the current position value is, we will set the position.  
Then we will add a summary of what our Reader class does, above our public Reader class.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ByteOrderIO
{
    /// <summary>
    /// The position to read at
    /// </summary>
    // L187 Reader class
    public class Reader : BaseIO
    {
        // L187 binary reader created
        BinaryReader br;

        // L187 property to hold position of binary reader
        public long Position
        {
            // L187 returns current position of binary reader
            get { return br.BaseStream.Position; }

            // L187 change Position depending on the current position value
            set { br.BaseStream.Position = value; }
*/



/*
Next we will collapse the public long Position, and work on our constructors, which will be located, at the top of our Reader class.  A shortcut to create a 
constructor, is to type 'ctor' and hit TAB twice.  In this Reader constructor, we will pass thru the string path, of the file that we want the binary reader to
read.  So we will then set our instance of binaryReader br to the path that will open the file, for our reader to read.
Next we will set the Byteorder we created earlier, to read in bigEndian and make sure it use .this byte order, Reader class, and not the other byteorder, in the
parent class, BaseIO.




	public class Reader : BaseIO
    {
		/// <summary>
        /// Create a reader, to read a file
        /// </summary>
        /// <param name="path">The path to the file, to read</param>
        // L187 create constructor using 'ctor' TAB 2x
        // pass thru the path to the file to be read, pas thru path
        public Reader(string path)
        {
            // L187 set binary reader to the path of the file to be opened and read
            br = new BinaryReader(File.OpenRead(path));

            // L187 set are Byteorder to BigEndian, make sure we use this. Byteorder
            this.Byteorder = byteorder.BigEndian;
        }
*/
Next. we will create another constructor to pass in the Byteorder and the path also;  below our public Reader (string pass) constructor.  Then set the path to
open the file to be read.  Then we will assign .this byteorder to the boBO byteorder being passed in.  Last we will add a summary, to both of our constructor
*/


		/// <summary>
        /// Create a reader, to read a file
        /// </summary>
        /// <param name="path">The path to the file, to read</param>
        /// <param name="boBO">The order of the bytes, to read</param>
		// L187 constructor to pass tru our Byteorder along with path
        public Reader(string path, byteorder boBO)
        {
            // L187 set binary reader to the path of the file to be opened and read
            br = new BinaryReader(File.OpenRead(path));

            // L187 set are Byteorder to passed in byteorder
            this.Byteorder = boBO;
        }

        // L187 binary reader created
        BinaryReader br;

        // L187 property to hold position of binary reader
        public long Position
        {
            // L187 returns current position of binary reader
            get { return br.BaseStream.Position; }

            // L187 change Position depending on the current position value
            set { br.BaseStream.Position = value; }
        }
    }

    // L186 rename class
    //class ByteIO
    public abstract class BaseIO
    {
        /// <summary>
        /// The order of the bytes, both read and written
        /// </summary>
        // L186 holds the big and little endian read and write
        public enum byteorder
        {
            BigEndian,
            LittleEndian
        }
        // L186 protected variable to store big or little endian data, depending which one we use
        // used in this class or its derived class
        protected byteorder Byteorder;
    }
}






/************************************* NO highlights from comments area *********************************/