/*
We will continue with the Address Book project.  In the last lesson we created the UI for our project, a class named people and filled it with
a bunch of properties about its members, then added thefunctionality property name to the ListView, and the all the properties to the people List, using 
button2 (Add Contact).  We also added the method of updating a person when the name is selected in the ListView, and enambling the button3 (Remove) 
which removes selected names, and thier properties from the listView1 and the people List<Person>.  In this lesson we will add the functionality
to edit the contact properties, and save the changes. Then we set up the creation of an xml document to save the all the data when the app is closed.
In this lesson we will do a prerequisit when we create our xml file; it will need a root element in order to create it. 
*/



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// to use Directory for creation of folder
using System.IO;
// to enable writing to our xml doc
using System.Xml;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        
        private void groupBox2_Enter(object sender, EventArgs e)
        {
           
        }

        // L170 class Person, with public string get and set properties
        class Person
            {
            public string Name
            {
                get;
                set;
            }
            public string Email
            {
                get;
                set;
            }
            public string StreetAddress
            {
                get;
                set;
            }
            public string Phone
            {
                get;
                set;
            }
            // L170 date time picker type birthday
            public DateTimePicker Birthday
            {
                get;
                set;
            }
            public string AdditionalNotes
            {
                get;
                set;
            }
        }



/*
First we will go over to our form1_Load method, and edited the creation of our xml file to add the root element.  We will need to use the xml writer
to do this.  So, we will create an instance of the xmltextwriter, then specify the path to our settings.xml we are creating, and also have to 
specify the encoding format for it text.
*/



        // L170 create a folder if one hasn't already been created, create a xml file in that folder     
        private void Form1_Load(object sender, EventArgs e)
        {
            // L170 string to hold folder path for app data
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            // L170 check to see if AddressBook - Rody already exists in this file path
            if (!Directory.Exists(path + "\\AddressBook - Roddy"))
            {
                // L170 create directory (folder) in our app data, path then directory name we choose to give it
                Directory.CreateDirectory(path + "\\AddressBook - Roddy");
            }
            // L170 create a xml file in the directory, above, if one hasn't already been created
            if (!File.Exists(path + "\\AddressBook - Roddy\\settings.xml"))
            {
                // L170 create a temp. place holder for the creation of our xml file
                //File.Create(path + "\\AddressBook - Roddy\\settings.xml");

                // L174 create an xml file with a root element using xml writer new instance, path to file, and encoding type
                XmlTextWriter xM = new XmlTextWriter(path + "\\AddressBook - Roddy\\settings.xml", Encoding.UTF8);



/*
Next we will continue by creating out root element in the file.  We will call it People, like our class name.  Then we will write the end element
which we will leave empty.   Then we we will close the newly created xml document.
*/


				// L174 create start root element using WrirestartElement
                xM.WriteStartElement("People");

                // L174 close the xml writer
                xM.Close();

            }
        }




/*
Next we will loop thruogh all the people in our people index file and add them to the xml document, when we close our app.  Go to the 
Form1_FormClosing code area.  First we will remove all the people from the xml node.  Then we will remove all the children within the people
node, so we can then add the updated data to the xml doc.  Then we will loop through all the people left in our list and add them to the xml
doc.
*/




 private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            // L173 create and write data to xml file, when closing the app
            XmlDocument xmlDoc = new XmlDocument();

            // L170 string to hold folder path for app data (copied from above)
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            // L173 then load the xml doc from default path
            xmlDoc.Load(path + "\\AddressBook - Roddy\\settings.xml");

            // L174 remove all the people from the xml node
            XmlNode xNode = xmlDoc.SelectSingleNode("people");

            // L174 remove the children nodes in the people node
            xNode.RemoveAll();

            // L174 itterate through out Person class people list and add the data to our xml doc
            foreach (Person p in people)
            {
                // L174 add info for the Person node we created as our root to our xml doc
                XmlNode xTop = xmlDoc.CreateElement("Person");

                // L174 add the info for all of the children nodes we made previously to our xml doc
                XmlNode xName = xmlDoc.CreateElement("Name");
                XmlNode xEmail = xmlDoc.CreateElement("Email");
                XmlNode xAddress = xmlDoc.CreateElement("Address");
                XmlNode xPhone = xmlDoc.CreateElement("Phone");
                XmlNode xBirthday = xmlDoc.CreateElement("Birthday");
                XmlNode xNotes = xmlDoc.CreateElement("Notes");
                




/*
Next we will add all the propertise information to our xml doc.  Then we will need to add those properties to the person node.  Then we will
add the person node to the People node.  Finally we will save the xml file.
*/



                // L174 add all the properties to our xml doc
                xName.InnerText = p.Name;
                xEmail.InnerText = p.Email;
                xAddress.InnerText = p.StreetAddress;
                xPhone.InnerText = p.Phone;             
                xNotes.InnerText = p.AdditionalNotes;

                // tutorial code doesn't work so created the alternative to continue with lesson
                //xBirthday.InnerText = p.Birthday.ToFileTime().ToString();
                xBirthday.InnerText = p.Birthday.ToString();

                // L174 add all the properties children to the Person node
                xTop.AppendChild(xName);
                xTop.AppendChild(xEmail);
                xTop.AppendChild(xAddress);
                xTop.AppendChild(xPhone);
                xTop.AppendChild(xNotes);
                xTop.AppendChild(xBirthday);

                // L174 add the people node into the person node
                xmlDoc.DocumentElement.AppendChild(xTop);
            }
            // L174 now save the xml document
            xmlDoc.Save(path + "\\AddressBook - Roddy\\settings.xml");
        }
    }
}











/*************************** highlights from the comments area ****************************/






If the program is not closing make sure in the create element there is no spaces

Incorrect:
XmlNode xAddress = xDoc.CreateElement("Street Address");

Correct:
XmlNode xAddress = xDoc.CreateElement("Address");






you need to remove setting.xml before run the program. the original setting.xml is empty and the root element is only written when xml file doesn't exist. 







The problem with this is that if your program (or your computer) crashes while you're in the middle of adding contacts and stuff, you've lost 
all your data. I put the Save method in a separate Methods class and called it whenever the user adds, saves or deletes an entry, which I think 
is a better (if slightly slower) way of doing things.








Delete the exciting folder and run the project again.







This might help future visitors to the tutorial.  Be aware that there are two different 'people'...  There is the list:
List<Person> people = new List<Person>();
and there is the start root element, that is capitalized;
 xM.WriteStartElement("People");
They are not the same, don't screw up the grammer as I did.
That said, I can't seem to be able to use Value with my DateTimePicker.  It will not compile if I try to use:
p.Birthday = dateTimePicker1.Value;
Using VS 2017.
Anybody know why the 'Value' is not valid?
I used p.Birthday = dateTimePicker1 to make it through the tut. but it gives me the default date, no matter what I pick