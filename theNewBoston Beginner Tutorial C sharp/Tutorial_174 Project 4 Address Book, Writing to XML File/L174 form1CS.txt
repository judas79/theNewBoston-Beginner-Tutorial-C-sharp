using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
// to use Directory for creation of folder
using System.IO;
// to enable writing to our xml doc
using System.Xml;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        
        private void groupBox2_Enter(object sender, EventArgs e)
        {
           
        }

        // L170 class Person, with public string get and set properties
        class Person
            {
            public string Name
            {
                get;
                set;
            }
            public string Email
            {
                get;
                set;
            }
            public string StreetAddress
            {
                get;
                set;
            }
            public string Phone
            {
                get;
                set;
            }
            // L170 date time picker type birthday
            public DateTimePicker Birthday
            {
                get;
                set;
            }
            public string AdditionalNotes
            {
                get;
                set;
            }
        }

        // L170 create a folder if one hasn't already been created, create a xml file in that folder     
        private void Form1_Load(object sender, EventArgs e)
        {
            // L170 string to hold folder path for app data
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            // L170 check to see if AddressBook - Rody already exists in this file path
            if (!Directory.Exists(path + "\\AddressBook - Roddy"))
            {
                // L170 create directory (folder) in our app data, path then directory name we choose to give it
                Directory.CreateDirectory(path + "\\AddressBook - Roddy");
            }
            // L170 create a xml file in the directory, above, if one hasn't already been created
            if (!File.Exists(path + "\\AddressBook - Roddy\\settings.xml"))
            {
                // L170 create a temp. place holder for the creation of our xml file
                //File.Create(path + "\\AddressBook - Roddy\\settings.xml");

                // L174 create an xml file with a root element using xml writer new instance, path to file, and encoding type
                XmlTextWriter xM = new XmlTextWriter(path + "\\AddressBook - Roddy\\settings.xml", Encoding.UTF8);

                // L174 create start root element using WrirestartElement
                xM.WriteStartElement("People");

                // L174 close the xml writer
                xM.Close();

            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {
                // L173 recreate all the entries to save to the xml file
                people[listView1.SelectedItems[0].Index].Name = textBox1.Text;
                people[listView1.SelectedItems[0].Index].Email = textBox2.Text;
                people[listView1.SelectedItems[0].Index].StreetAddress = textBox3.Text;
                people[listView1.SelectedItems[0].Index].Phone = textBox5.Text;
                people[listView1.SelectedItems[0].Index].AdditionalNotes = textBox4.Text;

                // This will not compile so we ommited 'Value' to get through the tutorial
                //people[listView1.SelectedItems[0].Index].Birthday = dateTimePicker1.Value;
                people[listView1.SelectedItems[0].Index].Birthday = dateTimePicker1;

                // L173 update Name in listView if it is changed and saved
                listView1.SelectedItems[0].Text = textBox1.Text;
            }
            catch { }

        }

        // L171 list hold data about people in class Person
        List<Person> people = new List<Person>();
        private void button2_Click(object sender, EventArgs e)
        {
            // L171 instance name of Person class
            Person Ip = new Person();

            // L171 set property to corresponding textboxs' value, that is next to it in our address book
            Ip.Name = textBox1.Text;
            Ip.Email = textBox2.Text;
            Ip.StreetAddress = textBox3.Text;
            Ip.Phone = textBox5.Text;

            // will not compile with 'Value' so its omitted to continue tut
            //Ip.Birthday = dateTimePicker1.Value;
            Ip.Birthday = dateTimePicker1;
            Ip.AdditionalNotes = textBox4.Text;

            // L171 add people to our class People list
            people.Add(Ip);

            // L171 add entered items Name to our listView1.
            listView1.Items.Add(Ip.Name);           

            // L171 clear all the textBoxes
            textBox1.Text = "";
            textBox2.Text = "";
            textBox3.Text = "";
            textBox4.Text = "";
            textBox5.Text = "";

            // L171 reset dateTimePicker to now
            dateTimePicker1.Value = DateTime.Now;
        }

        private void listView1_SelectedIndexChanged(object sender, EventArgs e)
        {
            // NOT in lesson, someone in the comments area noticed this try staytement was added to the code
            // but was now mentioned in the tutorial
            try
            {
                // L172 display property information stored in people List<Person>
                // in textbox coressponding to that properties name using listview1 selected items index
                // the [0] chooses one at a time for the selected items name
                // NOT in lesson: From comments area:  stops the exception out of bounds error, when switching between contacts in listview1
                if (listView1.SelectedItems.Count == 0) return;
                textBox1.Text = people[listView1.SelectedItems[0].Index].Name;
                textBox2.Text = people[listView1.SelectedItems[0].Index].Email;
                textBox3.Text = people[listView1.SelectedItems[0].Index].StreetAddress;
                textBox4.Text = people[listView1.SelectedItems[0].Index].Phone;
                textBox5.Text = people[listView1.SelectedItems[0].Index].AdditionalNotes;

                // L172 the same for dateTimePicker Value
                dateTimePicker1 = people[listView1.SelectedItems[0].Index].Birthday;
            }
            catch { }

        }

        // L172 remove method to delete from the people List, and the ListView1
        void Remove()
        {
            try
            { 
                // L172 remove items from 'people' List, using listView to pick the item index
                people.RemoveAt(listView1.SelectedItems[0].Index);

                // L172 Remove selected items from ListView1
                listView1.Items.Remove(listView1.SelectedItems[0]);
            }

            // L172 catch is empty, so the user will never know
            catch { }
        }


        private void button3_Click(object sender, EventArgs e)
        {
            // L172 call the remove method
            Remove();
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            // L172 call the remove method
            Remove();
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            // L173 create and write data to xml file, when closing the app
            XmlDocument xmlDoc = new XmlDocument();

            // L170 string to hold folder path for app data (copied from above)
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

            // L173 then load the xml doc from default path
            xmlDoc.Load(path + "\\AddressBook - Roddy\\settings.xml");

            // L174 remove all the people from the xml node
            XmlNode xNode = xmlDoc.SelectSingleNode("People");

            // L174 remove the children nodes in the people node
            xNode.RemoveAll();

            // L174 itterate through out Person class people list and add the data to our xml doc
            foreach (Person p in people)
            {
                // L174 add info for the Person node we created as our root to our xml doc
                XmlNode xTop = xmlDoc.CreateElement("Person");

                // L174 add the info for all of the children nodes we made previously to our xml doc
                XmlNode xName = xmlDoc.CreateElement("Name");
                XmlNode xEmail = xmlDoc.CreateElement("Email");
                XmlNode xAddress = xmlDoc.CreateElement("Address");
                XmlNode xPhone = xmlDoc.CreateElement("Phone");
                XmlNode xBirthday = xmlDoc.CreateElement("Birthday");
                XmlNode xNotes = xmlDoc.CreateElement("Notes");

                // L174 add all the properties to our xml doc
                xName.InnerText = p.Name;
                xEmail.InnerText = p.Email;
                xAddress.InnerText = p.StreetAddress;
                xPhone.InnerText = p.Phone;             
                xNotes.InnerText = p.AdditionalNotes;

                // tutorial code doesn't work so created the alternative to continue with lesson
                //xBirthday.InnerText = p.Birthday.ToFileTime().ToString();
                xBirthday.InnerText = p.Birthday.ToString();

                // L174 add all the properties children to the Person node
                xTop.AppendChild(xName);
                xTop.AppendChild(xEmail);
                xTop.AppendChild(xAddress);
                xTop.AppendChild(xPhone);
                xTop.AppendChild(xNotes);
                xTop.AppendChild(xBirthday);

                // L174 add the people node into the person node
                xmlDoc.DocumentElement.AppendChild(xTop);
            }
            // L174 now save the xml document
            xmlDoc.Save(path + "\\AddressBook - Roddy\\settings.xml");
        }
    }
}
