/*
In the previous lesson we mad a public abstract class and renamed it to BaseIO, then created an enumerator to hold our Big and Little Endians, then created a
protected variable to hold whichever data, from the Big or Little Endian, depending on which 0ne we are using then we will be worked on the reader class, of this 
reader/ writer, then added our system IO namespace to out ByteIO.cs.  We will also added our summary, which we should have done, in the previous lesson, as all of
our constructors will have in this project.  After that we, continued in our reader class, by adding different data types of integer bytes, to read and a method 
to bytes, even though bytes are read in bigendian, not to be confused with byte.  Then we wrote a method to close our reader, and another to reverse the byte order
of whatever the user has loaded, to either big or little endian.  
*/


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace ByteOrderIO
{
    /// <summary>
    /// The position to read at
    /// </summary>
    // L187 Reader class
    public class Reader : BaseIO
    {
        /// <summary>
        /// Create a reader, to read a file
        /// </summary>
        /// <param name="path">The path to the file, to read</param>
        // L187 create constructor using 'ctor' TAB 2x
        // pass thru the path to the file to be read, pas thru path
        public Reader(string path)
        {
            // L187 set binary reader to the path of the file to be opened and read
            br = new BinaryReader(File.OpenRead(path));

            // L187 set the Byteorder to BigEndian, using Reader class BaseIO
            this.Byteorder = byteorder.BigEndian;
        }
        /// <summary>
        /// Create a reader, to read a file
        /// </summary>
        /// <param name="path">The path to the file, to read</param>
        /// <param name="boBO">The order of the bytes, to read</param>
        // L187 constructor to pass tru our Byteorder along with path
        public Reader(string path, byteorder boBO)
        {
            // L187 set binary reader to the path of the file to be opened and read
            br = new BinaryReader(File.OpenRead(path));

            // L187 set are Byteorder to passed in byteorder
            this.Byteorder = boBO;
        }

        // L187 binary reader created
        BinaryReader br;

        // L187 property to hold position of binary reader
        public long Position
        {
            // L187 returns current position of binary reader
            get { return br.BaseStream.Position; }

            // L187 change Position depending on the current position value
            set { br.BaseStream.Position = value; }
        }

        /// <summary>
        /// Read byte, return Position, advance one, to next byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, byte, advance one , then go to the following byte, and return Position
        public byte ReadByte()
        {
            return br.ReadByte();
        }
        /// <summary>
        /// Read signed byte, return its Position, advance one, to next byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, signed byte, advance one , then go to the following signed byte, and return Position
        public sbyte ReadSByte()
        {
            return (sbyte)br.ReadByte();
        }

        /// <summary>
        /// Read short (int16) byte, return its Position, advance one byte, to next short
        /// </summary>
        /// <returns></returns>
        // L188 read data type, short (int16) byte, advance one , then go to the following short, and return Position
        public short ReadInt16()
        {
            short myShort = br.ReadInt16();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myShort);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myShort = BitConverter.ToInt16(buffer, 0);
            }
            return myShort;
        }

        /// <summary>
        /// Read ushort (UInt16) byte, return its Position, advance one byte, to next ushort
        /// </summary>
        /// <returns></returns>
        // L188 read data type, ushort (UInt16) byte, advance one , then go to the following ushort, and return Position
        public ushort ReadUint16()
        {
            ushort myUshort = br.ReadUInt16();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myUshort);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myUshort = BitConverter.ToUInt16(buffer, 0);
            }
            return myUshort;
        }

        /// <summary>
        /// Read int (int32) byte, return its Position, advance one byte, to next int byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, int (int32) byte, advance one , then go to the following int byte, and return Position
        public int ReadInt32()
        {
            int myInt = br.ReadInt32();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myInt);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myInt = BitConverter.ToInt32(buffer, 0);
            }
            return myInt;
        }

        /// <summary>
        /// Read uint (UInt32) byte, return its Position, advance one byte, to next uint byte
        /// </summary>
        /// <returns></returns>
        // L188 read data type, uint (UInt32) byte, advance one , then go to the following uint byte, and return Position
        public uint ReadUInt32()
        {
            uint myUint = br.ReadUInt32();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myUint);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myUint = BitConverter.ToUInt32(buffer, 0);
            }
            return myUint;
        }

        /// <summary>
        /// Read long (int64) byte, return its Position, advance one byte, to next byte long
        /// </summary>
        /// <returns></returns>
        // L188 read data type, long (int64) byte, advance one , then go to the following long, and return its Position
        public long Readint64()
        {
            long myLong = br.ReadInt64();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myLong);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myLong = BitConverter.ToInt64(buffer, 0);
            }
            return myLong;
        }

        /// <summary>
        /// Read ulong (Uint64) byte, return its Position, advance one byte, to next byte ulong
        /// </summary>
        /// <returns></returns>
        // L188 read data type, ulong (Uint64) byte, advance one , then go to the following ulong, and return its Position
        public ulong ReadUint64()
        {
            ulong myUlong = br.ReadUInt64();

            // L188 if we want myShort to be a Big Endian check byteorder
            if (Byteorder == byteorder.BigEndian)
            {
                // L188 convert myShort to byte array
                byte[] buffer = BitConverter.GetBytes(myUlong);

                // L188 reverse the buffer array from little to big endian
                Array.Reverse(buffer);

                // convert buffer array back into short, starting at index 0
                myUlong = BitConverter.ToUInt64(buffer, 0);
            }
            return myUlong;
        }

        /// <summary>
        /// Read user specified bytes, return bytes array Position, advance one byte, to next bytes
        /// </summary>
        /// <returns></returns>
        // L189 read data type, byte[], read amount passed tru by user , then go to the following bytes, and return the Position
        // if bytes byteorder are in littlendian tranform to bigendian
        public byte[] ReadBytes(int amount)
        {
            byte[] buffer = br.ReadBytes(amount);
            if (Byteorder == byteorder.LittleEndian)
            {
                Array.Reverse(buffer);
            }
            return buffer;
        }

        // L189 close the reader method
        public void closeReader()
        {
            br.Close();
        }

        /// <summary>
        /// User chooses the byteorder, BigEndian or LittleEndian
        /// </summary>
        /// <param name="bo"></param>
        // L189 chang byte order from big to little endian or visa versa, 
        public void changeByteOrder(byteorder bo)
        {
            // L189 in this class not the BaseIO class
            this.Byteorder = bo;
        }

        


/*
In this lesson we will read the amount of bytes, determined by the length of a string, to read the string.  We will use the ReadChars method and not the ReadString,
because the ReadString method does not allow the reading of the string using the Lenght property.  Then we will cast the chars a a new string.
*/




		// L190 read bytes in string by its length
        public string ReadString(int iLength)
        {
            // L190 read the chars in the string
            return new string(br.ReadChars(iLength));
        }



/*
The next method will read a unicode string.  A unicode string is made up of a two byte integer (int16).  Unicode is neccessary for representing languages that
use more the one byte for a character.  For example Japaneese, uses two byte to represent one character in the spelling of some words.  If you looked at a word
such as Adam, in unicode, it will have a '.' dot, which represent 00 in hex, before each character (.A.d.a.m); 00 41 00 61 00 64 00 6D hex.  In big Endian, the 
chars are stored, like our example.  If unicode is stored in little endian the bytes would be read from right to left and stored that way.  Adam A.d.a.m. and in
hex 41 00 61 00 64 00 6D 00 hex.
Back to our method, we will want to read our unicode string, using the user requested length of our string, to do so.  To read the unicode string in bytes, the
user would have to enter '8' to read (.A.d.a.m), as an example.  We will determine what type of unicode string to read it as, determined by the unicode type, in
an if statement.  Little endian is refered to as 'unicode' when Encoding, which is its default encoding, big endian is refered to as BigEndianUnicode, when Encoding
unicode.  So we will read the user requested bytes, in bytes of two, and encode those bytes to big or little endian. 
*/


		/// <summary>
        /// user requested length of bytes to read as string, then encode as big endian or little endian (unicode is in little endian)
        /// </summary>
        /// <param name="iLength"></param>
        /// <returns></returns>
        // L190 read user requested length, in bytes and return a unicode string
        public string ReadUnicodeString(int iLength)
        {
            // L190 if it is a bigendian get the bytes as a string and use encoding to return it as bigendian
            if (Byteorder == byteorder.BigEndian)
                return Encoding.BigEndianUnicode.GetString(br.ReadBytes(iLength));
            else 
                // L190 return it in littleEnding unicode, which is unicode, default name and structure, for little endian
                return Encoding.Unicode.GetString(br.ReadBytes(iLength));
            
        }
    }

    // L186 rename class
    //class ByteIO
    public abstract class BaseIO
    {
        /// <summary>
        /// The order of the bytes, both read and written
        /// </summary>
        // L186 holds the big and little endian read and write
        public enum byteorder
        {
            BigEndian,
            LittleEndian
        }
        // L186 protected variable to store big or little endian data, depending which one we use
        // used in this class or its derived class
        protected byteorder Byteorder;
    }
}








/************************************* NO highlights from the comments area**************************************/