/*
In the previous tutorial, we used the VS editor to design our user interface, hangmans pole and head, for the Hangman game.  We 
will need all that code to continue our project to draw our arms and body.  We will continue adding to our drawBodyPart(BodyParts bdprts)
method.  We will also a temporary calls in our hangManPost() method to see our changes, when we debug, of the body parts we have added,
to adjust them, as we go.
*/


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace theNewBoston_Beginner_Tutorial_C_sharp
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

            // L155 method to display hangman post in panel1
            void hangManPost()
        {
            //L155 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            //L155 create pen draws 10 pixels and is brown
            Pen pn = new Pen(Color.Brown, 10f);

            // L155 draw starting points for line using graphics, pen and new Points
            // horizontal base
            gr.DrawLine(pn, new Point(157, 300), new Point(203, 300));
            // vertical line going up
            gr.DrawLine(pn, new Point (180, 300), new Point(180, 5));
            // horizontal line going left
            gr.DrawLine(pn, new Point(185, 5), new Point(60, 5));
            // vertical line going down
            gr.DrawLine(pn, new Point(65, 5), new Point(65, 50));

            // L156 temporary for testing body part placement
            drawBodyPart(BodyParts.Head);
            drawBodyPart(BodyParts.Left_Eye);
            drawBodyPart(BodyParts.Right_Eye);
            drawBodyPart(BodyParts.Mouth);
        }

        // L156 create enumeration to hold list of entire body and its parts
        enum BodyParts
        {
            Head,
            Left_Eye,
            Right_Eye,
            Mouth,
            Left_Arm,
            Right_Arm,
            Body,
            Left_Leg,
            Right_Leg
        }

        // L156 method to display all the parts of the hangman in panel1, pass in BodyParts name bdprts
        void drawBodyPart(BodyParts bdprts)
        {
            // L156 instance of CreateGraphics in panel1
            Graphics gr = panel1.CreateGraphics();

            // L156 create pen to draw and is blue, size is 2 pixels
            Pen pn = new Pen(Color.Blue, 2);

            // L156 create black solidBrush to make the eyes
            SolidBrush sb = new SolidBrush(Color.Black);

            // L156 compare if enum bdprts is the head, start at end of hangman pole, elipse size 40x40
            if (bdprts == BodyParts.Head)
                gr.DrawEllipse(pn, 45, 50, 40, 40);

            // L156 draw left eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Left_Eye)
                gr.FillEllipse(sb, 55, 65, 5, 5);

            // L156 draw right eye using fillElipse with solidBrush
            else if (bdprts == BodyParts.Right_Eye)
                gr.FillEllipse(sb, 67, 65, 5, 5);

            // L156 draw mouth using pen and using an arch starting at 45 degrees and draw 90 degrees
            else if (bdprts == BodyParts.Mouth)
                pn.Color = (Color.Black);
                gr.DrawArc(pn, 54, 63, 20, 20, 45, 90);



/*
We will start by adding the body, using our pen, to the bottom center of our head.  If we start at the same x axis place we left off of, in 
the pole stem and add 40 pixels, to the end of the hangmans pole stem, on the y axis, we should be at the correct coordinates.  We will make
the body 80 y pixels long.  Then we start at the same x coordinate but go down 15 on the y axis to start our left arms, and angle up by
going down 40 or so pixels on the x axis and up 10 on the y axis.  We will do the inverse, for the right arm, so start where we did before,
so add 40 or so to the x axis and both y axis should be the same value.
*/


            // L157 vertical line going down for body
            else if (bdprts == BodyParts.Body)
            {
                pn.Color = (Color.Blue);
                gr.DrawLine(pn, new Point(65, 90), new Point(65, 180));
            }

            // L157 line going at an angle left arm
            else if (bdprts == BodyParts.Left_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(20, 90));

            // L157 line going at an angle right arm
            else if (bdprts == BodyParts.Right_Arm)
                gr.DrawLine(pn, new Point(65, 100), new Point(102, 90));
        }

        private void Form1_Shown(object sender, EventArgs e)
        {
            // L155 pass in hangManPost method to display in form1 using event Shown
            hangManPost();
        }
    }
}



/*
We will add the drawBodyPart(BodyParts bdprts) method components to our hangManPost() method so we can check that all the parts go together 
correctly.



			drawBodyPart(BodyParts.Body);
            drawBodyPart(BodyParts.Left_Arm);
            drawBodyPart(BodyParts.Right_Arm);
*/






/************************************ highlights from the comments area ********************************/







im just wondering why adam manually create a graphics if he can draw body parts from ms paint and use resources to change the body parts 
programmatically



@inurdreamsfuzzy It's good programming practice too draw the graphics in game, since you will need to include the graphics in the output 
folder, and anyone can change it
